#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.Net.Mail;
#endregion

namespace ST_45346a75e4274a978128011ad431997a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here

            // Lock the read only variables
            Dts.VariableDispenser.LockForRead("User::CMS_SupportDoc_URL");
            Dts.VariableDispenser.LockForRead("User::MailFrom");
            Dts.VariableDispenser.LockForRead("User::MailTo");
            Dts.VariableDispenser.LockForRead("User::SMTPConnection");
            Dts.VariableDispenser.LockForRead("User::Environment");
            Dts.VariableDispenser.LockForRead("System::PackageName");
            Dts.VariableDispenser.LockForRead("System::MachineName");
            Dts.VariableDispenser.LockForRead("System::SourceName");
            Dts.VariableDispenser.LockForRead("System::StartTime");
            Dts.VariableDispenser.LockForRead("System::UserName");
            Dts.VariableDispenser.LockForRead("System::ErrorCode");
            Dts.VariableDispenser.LockForRead("System::ErrorDescription");


            // Create a variable container to store the variables
            Variables vars = null;
            Dts.VariableDispenser.GetVariables(ref vars);

            // Get the read only variables
            string CMS_SupportDoc_URL = vars["User::CMS_SupportDoc_URL"].Value.ToString();
            string MailFrom = vars["User::Environment"].Value.ToString() + "_" + vars["User::MailFrom"].Value.ToString();
            string MailTo = vars["User::MailTo"].Value.ToString();
            string SMTPConnection = vars["User::SMTPConnection"].Value.ToString();
            string Environment = vars["User::Environment"].Value.ToString();
            string PackageName = vars["System::PackageName"].Value.ToString();
            string MachineName = vars["System::MachineName"].Value.ToString();
            string StartTime = vars["System::StartTime"].Value.ToString();
            string UserName = vars["System::UserName"].Value.ToString();
            string SourceName = vars["System::SourceName"].Value.ToString();
            int ErrorCode = System.Convert.ToInt32(vars["System::ErrorCode"].Value);
            string ErrorDescription = vars["System::ErrorDescription"].Value.ToString();


            // Unlock the variables
            vars.Unlock();

            // Create HTML email body
            string emailBody = "<!DOCTYPE html>";
            emailBody = emailBody + "<html>";
            emailBody = emailBody + "<body>";

            // Create HTML email header
            string emailHeaderHTML = "<table cellpadding=\"5\">";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#C0C0C0;font-size:16pt;\">";
            emailHeaderHTML = emailHeaderHTML + "<th colspan=\"2\">Package Details</th>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#E6E6E6;\">";
            emailHeaderHTML = emailHeaderHTML + "<td style=\"font-weight:bold;text-align:right;\">Package Name</td>";
            emailHeaderHTML = emailHeaderHTML + "<td>" + PackageName + "</td>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#F9F9F9;\">";
            emailHeaderHTML = emailHeaderHTML + "<td style=\"font-weight:bold;text-align:right;\">Environment</td>";
            emailHeaderHTML = emailHeaderHTML + "<td>" + Environment + "</td>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#E6E6E6;\">";
            emailHeaderHTML = emailHeaderHTML + "<td style=\"font-weight:bold;text-align:right;\">Machine Name</td>";
            emailHeaderHTML = emailHeaderHTML + "<td>" + MachineName + "</td>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#F9F9F9;\">";
            emailHeaderHTML = emailHeaderHTML + "<td style=\"font-weight:bold;text-align:right;\">User Name</td>";
            emailHeaderHTML = emailHeaderHTML + "<td>" + UserName + "</td>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "<tr style=\"background-color:#E6E6E6;\">";
            emailHeaderHTML = emailHeaderHTML + "<td style=\"font-weight:bold;text-align:right;\">Start Time</td>";
            emailHeaderHTML = emailHeaderHTML + "<td>" + StartTime + "</td>";
            emailHeaderHTML = emailHeaderHTML + "</tr>";
            emailHeaderHTML = emailHeaderHTML + "</table>";

            // Add header to HTML body
            emailBody = emailBody + emailHeaderHTML;
            emailBody = emailBody + "<br>";

            // Create email footer
            string emailFooterHTML= "<div style=\"font-weight:bold;\">";
            emailFooterHTML = emailFooterHTML + "Message:";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:normal;background-color:#FF6666\">";
            emailFooterHTML = emailFooterHTML + "<Strong>" + PackageName + "</Strong>" + " package has failed in " + "<Strong>" + Environment + "</Strong>" + " at " + "<Strong>" +SourceName + "</Strong>" + " task with below error";
            emailFooterHTML = emailFooterHTML + "</div>";
            emailFooterHTML = emailFooterHTML + "<br>";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:bold;\">";
            emailFooterHTML = emailFooterHTML + "Error Code: ";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:normal;background-color:#FF6666\">";
            emailFooterHTML = emailFooterHTML + ErrorCode;
            emailFooterHTML = emailFooterHTML + "</div>";
            emailFooterHTML = emailFooterHTML + "<br>";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:bold;\">";
            emailFooterHTML = emailFooterHTML + "Error Description: ";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:normal;background-color:#FF6666\">";
            emailFooterHTML = emailFooterHTML + ErrorDescription;
            emailFooterHTML = emailFooterHTML + "</div>";
            emailFooterHTML = emailFooterHTML + "<br>";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:bold;\">";
            emailFooterHTML = emailFooterHTML + "Support Documentation: ";
            emailFooterHTML = emailFooterHTML + "<div style=\"font-weight:normal;\">";
            emailFooterHTML = emailFooterHTML + "<a href=" + CMS_SupportDoc_URL + ">CMS Production Support</a>";
            emailFooterHTML = emailFooterHTML + "</div>";

            //emailBody = emailBody + "<br>";
            emailBody = emailBody + emailFooterHTML;
            emailBody = emailBody + "</body>";
            emailBody = emailBody + "</html>";

            // Create email
            MailMessage message = new MailMessage();
            message.IsBodyHtml = true;
            message.From = new System.Net.Mail.MailAddress(MailFrom);
            message.To.Add(MailTo);
            message.Subject = "SSIS Job : " + PackageName + " - Failed in " + Environment;
            message.Body = emailBody;

            // Send email
            SmtpClient smtp = new SmtpClient();
            smtp.Host = SMTPConnection;
            smtp.EnableSsl = false;
            smtp.Send(message);

            Dts.TaskResult = (int)ScriptResults.Success;

        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}